Me parecen muy claros, Lucas. De las luces no las puedo opinar porque
todavía no tengo del todo claro cómo las usamos, pero el resto lo
entendí bien.

Me parece arriesgada tu decisión de incluir el resultado del cómputo de
_distancia mínima_ como un parámetro al módulo _Decisión_. Esto hace que
la distancia mínima se compute cada vez que se llame a un ascensor
(incluso si no están los dos libres). Tal cómputo requiere de leer 'D'
en los Lift-Interface de cada ascensor, y la lectura solo se garantizada
correcta si el ascensor está quieto. La alternativa es quitarle a
_Decisión_ la entrada F1 y hacer que devuelva en la salida una segunda
variable binaria que cuando está prendida nos indique que debemos ir a
buscar el 'verdadero' resultado de 'A' al módulo _Distancia Mínima_. Me
gustaría debatir esto antes de meternos en la implementación de
_Decisión_.

Hay un detalle que todavía no logro conciliar, respecto a qué tipo de
diseño se espera. Lo bueno es que el problema no es inmediato, y se
puede patear para la próxima entrega. Explico:
Durante la clase de ayer el JTP comentó que podríamos usar un circuito
para cada piso, que responda a los llamados de ese piso solamente...
independizar cada pulsador. Entonces podemos:
(1) El piso al que debemos enviar el ascensor elegido (el 'F' del
Lift-Interface, el de _Llamador_ y _Distancia Mínima_ , creo) es un
valor constante para cada circuito, un número de dos bits que nunca va a
cambiar. Si es así el caso, podríamos trabajar tranquilos, con ese valor
como un recurso que siempre está, e implementar para cada uno de los 4
DISTINTOS circuitos su propio módulo _Distancia Mínima_. Esto implica un
diseño mucho menos flexible pero más simple (menos cables y conexiones).
(2) Trabajar por ahora con el 'F' como una variable, como en los
diagramas de Lucas, y posteriormente envolver toda la funcionalidad
(para todos los pisos por igual), haciendo que se elija qué usar
dependiendo del valor de 'F'.
Honestamente me atrae mucho la opción (1). Cuando vean las 4 funciones
que componen _Distancia Mínima_ van a ver que son cada una de ellas
sencillas, y distintas... poner a las cuatro juntas, eligiendo por 'F',
en un solo módulo lo hace más flexible, pero lo complica bastante.
Me gustaría escuchar sus opiniones sobre esto; no es un tema urgente,
pero es una cruz en el diseño.

Por último, le comento que estoy adjuntando a este mail un documento
crudo con la expresión y simplificación (por Karnaugh) de las funciones
que van a componer _Distancia Mínima_. Digo "funciones", en plural,
porque hice una para cada piso en que estaría el pulsador accionado.
Haciéndolo así ganamos en simplicidad, y si luego decidimos ponerlas
todas juntas, bastaría decidir cuál usar dependiendo del piso del
pulsador (un wrapper que envuelva a las 4).
Los diagramas y expresiones de las funciones (pasadas en Latex)
quedarían lindas para la entrega.
Las funciones está revisadas, pero todavía sujetas a testeo (no encontré
software apropiado para corroborar que estén correctas).

Noten que para poder hacer las simplificaciones tuve que tomar algunas
decisiones: (a) cuál ascensor llamar en caso de empate, y (b) el sistema
numérico que represente los números de los pisos.
Creo que habíamos hablado de (a), pero no me acuerdo que decidimos :P .
Respecto a (b), recuerdo que queríamos usar {-1,0,1,2} para facilitar la
aritmética (error mío). Ninguno de los sistemas usados en clase nos dan
este rango de números con dos bits, así que propongo uno "menos
natural" (un mapeo, sumando 1 para la ida, restando 1 para la vuelta).
Fue necesario decidir sobre (a) y (b) para poder empezar las
simplificaciones (Karnaugh), pero estamos a tiempo de cambiarlo. Si les
llega a parecer mal, por favor me avisan. No quiero tomar decisiones que
no satisfagan a los tres.
